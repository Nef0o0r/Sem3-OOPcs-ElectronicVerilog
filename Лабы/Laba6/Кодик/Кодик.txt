Начальный:


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FileDetails
{
    enum AccountType
    {
        Checking,
        Deposit
    }
    struct BankAccount
    {
        public long accNo;
        public decimal accBal;
        public AccountType accType;
    }
    class CreateAccount
    {
        static void Main()
        {
            BankAccount berts = NewBankAccount();
            Write(berts);

            BankAccount freds = NewBankAccount();
            Write(freds);
        }

        static BankAccount NewBankAccount()
        {
            BankAccount created;

            Console.Write("Enter the account number   : ");
            long number = long.Parse(Console.ReadLine());

            Console.Write("Enter the account balance! : ");
            decimal balance = decimal.Parse(Console.ReadLine());

            created.accNo = number;
            created.accBal = balance;
            created.accType = AccountType.Checking;

            return created;
        }

        static void Write(BankAccount toWrite)
        {
            Console.WriteLine("Account number is {0}", toWrite.accNo);
            Console.WriteLine("Account balance is {0}", toWrite.accBal);
            Console.WriteLine("Account type is {0}", toWrite.accType.ToString());
        }
    }
}


Упражнение 1_(17)

using System;

namespace FileDetails
{
    enum AccountType
    {
        Checking,
        Deposit
    }
    class BankAccount
    {
        private long accNo;
        private decimal accBal;
        private AccountType accType;

        public void Populate(long number, decimal balance)
        {
            accNo = number;
            accBal = balance;
            accType = AccountType.Checking;
        }
        public long GetAccNo()
        {
            return accNo;
        }
        public decimal GetAccBal()
        {
            return accBal;
        }
        public AccountType GetAccountType()
        {
            return accType;
        }
    }
    class CreateAccount
    {
        static void Main()
        {
            BankAccount berts = NewBankAccount();
            Write(berts);

            BankAccount freds = NewBankAccount();
            Write(freds);
        }

        static BankAccount NewBankAccount()
        {
            BankAccount created = new BankAccount();

            Console.Write("Enter the account number: ");
            long number = long.Parse(Console.ReadLine());

            Console.Write("Enter the account balance!: ");
            decimal balance = decimal.Parse(Console.ReadLine());

            created.Populate(number, balance);
            //created.accNo = number;
            //created.accBal = balance;
            //created.accType = AccountType.Checking;

            return created;
        }

        static void Write(BankAccount toWrite)
        {   
            Console.WriteLine("Account number is {0}", toWrite.GetAccNo());
            Console.WriteLine("Account balance is {0}", toWrite.GetAccBal());
            Console.WriteLine("Account type is {0}", toWrite.GetAccountType());
        }
    }
}




Упражнение 2(6):

using System;
using System.Data.SqlTypes;

namespace FileDetails
{
    enum AccountType
    {
        Checking,
        Deposit
    }
    class BankAccount
    {
        private long accNo;
        private decimal accBal;
        private AccountType accType;
        private static long nextAccNo;

        public static long NextNumber()
        {   
            nextAccNo++;
            return nextAccNo;
        }
        public void Populate(long number, decimal balance)
        {
            accNo = number;
            accBal = balance;
            accType = AccountType.Checking;
        }
        public long GetAccNo()
        {
            return accNo;
        }
        public decimal GetAccBal()
        {
            return accBal;
        }
        public AccountType GetAccountType()
        {
            return accType;
        }
    }
    class CreateAccount
    {
        static void Main()
        {
            BankAccount berts = NewBankAccount();
            Write(berts);

            BankAccount freds = NewBankAccount();
            Write(freds);
        }

        static BankAccount NewBankAccount()
        {
            BankAccount created = new BankAccount();

            // Console.Write("Enter the account number: ");
            //long number = long.Parse(Console.ReadLine());

            long number = BankAccount.NextNumber();

            Console.Write("Enter the account balance!: ");
            decimal balance = decimal.Parse(Console.ReadLine());

            created.Populate(number, balance);
            //created.accNo = number;
            //created.accBal = balance;
            //created.accType = AccountType.Checking;

            return created;
        }

        static void Write(BankAccount toWrite)
        {   
            Console.WriteLine("Account number is {0}", toWrite.GetAccNo());
            Console.WriteLine("Account balance is {0}", toWrite.GetAccBal());
            Console.WriteLine("Account type is {0}", toWrite.GetAccountType());
        }
    }
}

Упражнение 2(12):

using System;
using System.Data.SqlTypes;

namespace FileDetails
{
    enum AccountType
    {
        Checking,
        Deposit
    }
    class BankAccount
    {
        private long accNo;
        private decimal accBal;
        private AccountType accType;
        private static long nextAccNo = 123;

        private static long NextNumber()
        {   
            nextAccNo++;
            return nextAccNo;
        }
        public void Populate(decimal balance)
        {
            accNo = NextNumber();
            accBal = balance;
            accType = AccountType.Checking;
        }
        public long GetAccNo()
        {
            return accNo;
        }
        public decimal GetAccBal()
        {
            return accBal;
        }
        public AccountType GetAccountType()
        {
            return accType;
        }
    }
    class CreateAccount
    {
        static void Main()
        {
            BankAccount berts = NewBankAccount();
            Write(berts);

            BankAccount freds = NewBankAccount();
            Write(freds);
        }

        static BankAccount NewBankAccount()
        {
            BankAccount created = new BankAccount();

            // Console.Write("Enter the account number: ");
            //long number = long.Parse(Console.ReadLine());

            //long number = BankAccount.NextNumber();

            Console.Write("Enter the account balance!: ");
            decimal balance = decimal.Parse(Console.ReadLine());

            created.Populate(balance);
            //created.accNo = number;
            //created.accBal = balance;
            //created.accType = AccountType.Checking;

            return created;
        }

        static void Write(BankAccount toWrite)
        {   
            Console.WriteLine("Account number is {0}", toWrite.GetAccNo());
            Console.WriteLine("Account balance is {0}", toWrite.GetAccBal());
            Console.WriteLine("Account type is {0}", toWrite.GetAccountType());
        }
    }
}



Упражнение 3(8):


using System;
using System.Diagnostics.Contracts;

namespace FileDetails
{
    enum AccountType
    {
        Checking,
        Deposit
    }
    class BankAccount
    {
        private long accNo;
        private decimal accBal;
        private AccountType accType;
        private static long nextAccNo = 123;

        private static long NextNumber()
        {   
            nextAccNo++;
            return nextAccNo;
        }
        public void Populate(decimal balance)
        {
            accNo = NextNumber();
            accBal = balance;
            accType = AccountType.Checking;
        }
        public long GetAccNo()
        {
            return accNo;
        }
        public decimal GetAccBal()
        {
            return accBal;
        }
        public AccountType GetAccountType()
        {
            return accType;
        }

        public decimal Deposit(decimal amount)
        {
            accBal += amount;
            return accBal;
        }

        public bool Withdraw(decimal amount)
        {
            accBal -= amount;
            return true;
        }
    }
    class CreateAccount
    {
        static void Main()
        {
            BankAccount berts = NewBankAccount();
            Write(berts);

            BankAccount freds = NewBankAccount();
            Write(freds);
            
            TestDeposit(berts);
            Write(berts);

            TestDeposit(freds);
            Write(freds);

            TestWithdraw(berts);
            Write(berts);
            
            TestWithdraw(freds);
            Write(freds);
        }

        static BankAccount NewBankAccount()
        {
            BankAccount created = new BankAccount();

            Console.Write("Enter the account balance!: ");
            decimal balance = decimal.Parse(Console.ReadLine());
            created.Populate(balance);
            return created;
        }

        static void Write(BankAccount toWrite)
        {   
            Console.WriteLine("Account number is {0}", toWrite.GetAccNo());
            Console.WriteLine("Account balance is {0}", toWrite.GetAccBal());
            Console.WriteLine("Account type is {0}", toWrite.GetAccountType());
        }
        public static void TestDeposit(BankAccount acc)
        {
            Console.WriteLine("Enter amount to deposit: ");
            string line = Console.ReadLine();
            decimal amount = decimal.Parse(line);
            acc.Deposit(amount);

        }

        public static void TestWithdraw(BankAccount acc)
        {
            Console.WriteLine("Enter amount to whithdraw: ");
            string line = Console.ReadLine();
            decimal amount = decimal.Parse(line);
            acc.Withdraw(amount);

        }
        
    }
}
